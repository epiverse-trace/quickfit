[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 quickfit authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Joshua W. Lambert. Author, maintainer. Adam Kucharski. Author. Pratik Gupte. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lambert J, Kucharski , Gupte P (2024). quickfit: Utility functions fitting comparing simple epidemiological models. R package version 0.0.0.9000, https://github.com/epiverse-trace/quickfit.","code":"@Manual{,   title = {quickfit: Utility functions for fitting and comparing simple epidemiological models},   author = {Joshua W. Lambert and Adam Kucharski and Pratik Gupte},   year = {2024},   note = {R package version 0.0.0.9000},   url = {https://github.com/epiverse-trace/quickfit}, }"},{"path":"/index.html","id":"quickfit","dir":"","previous_headings":"","what":"Utility functions for fitting and comparing simple epidemiological\n    models","title":"Utility functions for fitting and comparing simple epidemiological\n    models","text":"quickfit R package help simple model fitting tasks epidemiology. quickfit developed Centre Mathematical Modelling Infectious Diseases London School Hygiene Tropical Medicine part Epiverse Initiative.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Utility functions for fitting and comparing simple epidemiological\n    models","text":"can install development version quickfit GitHub :","code":"# check whether {pak} is installed if(!require(\"pak\")) install.packages(\"pak\") pak::pak(\"epiverse-trace/quickfit\")"},{"path":"/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick start","title":"Utility functions for fitting and comparing simple epidemiological\n    models","text":"examples illustrate current functionalities: Generate simulated data, define likelihood, estimate MLE, MLE 95% confidence interval based profile likelihood: Additionally, multiple distribution models can compared (censored non-censored data).","code":"library(quickfit) sim_data <- rnorm(50, 4, 2)  # Define likelihood function log_l <- function(x,a,b) dnorm(x, a, b, log = TRUE)  # Estimate MLE estimate_mle(log_l, sim_data, n_param = 2, a_initial = 3, b_initial = 1) #> $estimate #>        a        b  #> 3.945122 2.223727  #>  #> $log_likelihood #> [1] -110.9108  # Estimate 95% CI based on profile likelihood calculate_profile(   log_l,    data_in = sim_data,    n_param = 2,    a_initial = 3,    b_initial = 1,    precision = 0.01 ) #> $estimate #>        a        b  #> 3.945122 2.223727  #>  #> $profile_out #>       a1       a2       b1       b2  #> 3.317470 4.577470 1.848473 2.749082 multi_fitdist(   data = rlnorm(n = 100, meanlog = 1, sdlog = 1),    models = c(\"lnorm\", \"gamma\", \"weibull\"),    func = fitdistrplus::fitdist ) #>    models    loglik      aic      bic #> 1   gamma -237.0588 478.1176 483.3280 #> 2 weibull -237.7660 479.5321 484.7424 #> 3   lnorm -240.0550 484.1099 489.3203"},{"path":"/index.html","id":"help","dir":"","previous_headings":"","what":"Help","title":"Utility functions for fitting and comparing simple epidemiological\n    models","text":"report bug please open issue","code":""},{"path":"/index.html","id":"contributions","dir":"","previous_headings":"Help","what":"Contributions","title":"Utility functions for fitting and comparing simple epidemiological\n    models","text":"Contributions welcome via pull requests.","code":""},{"path":"/index.html","id":"code-of-conduct","dir":"","previous_headings":"Help","what":"Code of Conduct","title":"Utility functions for fitting and comparing simple epidemiological\n    models","text":"Please note quickfit project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"/reference/calc_aic.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the Akaike information criterion — calc_aic","title":"Calculates the Akaike information criterion — calc_aic","text":"Calculates Akaike information criterion","code":""},{"path":"/reference/calc_aic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the Akaike information criterion — calc_aic","text":"","code":"calc_aic(loglik, df = 2)"},{"path":"/reference/calc_aic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the Akaike information criterion — calc_aic","text":"loglik vector single number loglikelihood model df numeric specifying degrees freedom model order calculate Akaike information criterion. Default 2.","code":""},{"path":"/reference/calc_aic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the Akaike information criterion — calc_aic","text":"single vector numerics equal input vector length","code":""},{"path":"/reference/calc_aic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the Akaike information criterion — calc_aic","text":"","code":"calc_aic(loglik = -110) #> [1] 224"},{"path":"/reference/calc_bic.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the Bayesian information criterion — calc_bic","title":"Calculates the Bayesian information criterion — calc_bic","text":"Calculates Bayesian information criterion","code":""},{"path":"/reference/calc_bic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the Bayesian information criterion — calc_bic","text":"","code":"calc_bic(loglik, data, df = 2)"},{"path":"/reference/calc_bic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the Bayesian information criterion — calc_bic","text":"loglik vector single number loglikelihood model data vector data frame containing data required function specified func argument. df numeric specifying degrees freedom model order calculate Akaike information criterion. Default 2.","code":""},{"path":"/reference/calc_bic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the Bayesian information criterion — calc_bic","text":"single vector numerics equal input vector length","code":""},{"path":"/reference/calc_bic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the Bayesian information criterion — calc_bic","text":"","code":"# example using vector data <- c(2, 13, 22, 25, 11, 12, 11, 23, 13, 24) calc_bic(loglik = -110, data = data) #> [1] 224.6052  # example using tabular data data <- data.frame(   c(2, 13, 22, 25, 11, 12, 11, 23, 13, 24),   c(4, 15, 19, 1, 16, 10, 3, 17, 16, 3) ) calc_bic(loglik = -110, data = data) #> [1] 224.6052"},{"path":"/reference/calculate_profile.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate profile likelihood and 95% CI — calculate_profile","title":"Estimate profile likelihood and 95% CI — calculate_profile","text":"function estimate profile likelihood 95% CI one two parameter model","code":""},{"path":"/reference/calculate_profile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate profile likelihood and 95% CI — calculate_profile","text":"","code":"calculate_profile(   log_likelihood,   data_in,   n_param,   a_initial,   b_initial = NULL,   precision = 0.01 )"},{"path":"/reference/calculate_profile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate profile likelihood and 95% CI — calculate_profile","text":"log_likelihood Log-likelihood function form function(x,) (one parameter model) function(x,,b) (two parameter model) data_in Vector observations evaluated log_likelihood, overall likelihood given sum(log_likelihood) n_param Number parameters log_likelihood model a_initial Initial guess parameter b_initial Initial guess parameter b (two parameter model, otherwise default NULL) precision Parameter defining fine-scale grid search profile likelihood","code":""},{"path":"/reference/calculate_profile.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimate profile likelihood and 95% CI — calculate_profile","text":"Adam Kucharski, Joshua W. Lambert","code":""},{"path":"/reference/calculate_profile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate profile likelihood and 95% CI — calculate_profile","text":"","code":"# example of a one parameter model data_in <- rnorm(n = 100, mean = 1, sd = 2) log_likelihood <- function(x,a) dnorm(x, a, 2, log = TRUE) n_param <- 1 a_initial <- 0.5  calculate_profile(   log_likelihood = log_likelihood,   data_in = data_in,   n_param = 1,   a_initial = 4,   precision = 0.1 ) #> $estimate #> [1] 1.141578 #>  #> $profile_out #>        a1        a2  #> 0.7495856 1.5335712  #>   # examle of a two parameter model data_in <- rnorm(n = 100, mean = 1, sd = 1) log_likelihood <- function(x,a,b) dnorm(x, a, b, log = TRUE) n_param <- 2 a_initial <- 0.5 b_initial <- 1  calculate_profile(   log_likelihood = log_likelihood,   data_in = data_in,   n_param = 2,   a_initial = 4,   b_initial = 2,   precision = 0.1 ) #> $estimate #>        a        b  #> 1.115020 1.009153  #>  #> $profile_out #>        a1        a2        b1        b2  #> 0.9641402 1.3641402 0.8729176 1.1453889  #>"},{"path":"/reference/dot-fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimise a function using either numerical optimisation or grid search — .fit","title":"Optimise a function using either numerical optimisation or grid search — .fit","text":"Optimise function using either numerical optimisation grid search","code":""},{"path":"/reference/dot-fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimise a function using either numerical optimisation or grid search — .fit","text":"","code":".fit(func, fit_method = c(\"optim\", \"grid\"), ...)"},{"path":"/reference/dot-fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimise a function using either numerical optimisation or grid search — .fit","text":"func function. fit_method character string, either \"optim\" \"grid\". ... <dynamic-dots> Named elements replace default optimisation settings either optim() grid search. See details.","code":""},{"path":"/reference/dot-fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimise a function using either numerical optimisation or grid search — .fit","text":"single numeric.","code":""},{"path":"/reference/dot-fit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Optimise a function using either numerical optimisation or grid search — .fit","text":"Arguments passed dots depend whether fit_method set \"optim\" \"grid\". \"optim\", arguments passed optim(), \"grid\", variable arguments lower, upper (lower upper bounds grid search parameter optimised, defaults lower = 0.001 upper = 0.999), \"res\" (resolution grid, default res = 0.001).","code":""},{"path":"/reference/estimate_mle.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the maximum-likelihood estimate for a given likelihood function — estimate_mle","title":"Calculates the maximum-likelihood estimate for a given likelihood function — estimate_mle","text":"function calculates maximum-likelihood estimate one two parameter model","code":""},{"path":"/reference/estimate_mle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the maximum-likelihood estimate for a given likelihood function — estimate_mle","text":"","code":"estimate_mle(log_likelihood, data_in, n_param, a_initial, b_initial = NULL)"},{"path":"/reference/estimate_mle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the maximum-likelihood estimate for a given likelihood function — estimate_mle","text":"log_likelihood Log-likelihood function form function(x, ) (one parameter model) function(x, , b) (two parameter model) data_in Vector observations evaluated log_likelihood, overall likelihood given sum(log_likelihood) n_param Number parameters log_likelihood model a_initial Initial guess parameter b_initial Initial guess parameter b (two parameter model, otherwise default NULL)","code":""},{"path":"/reference/estimate_mle.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculates the maximum-likelihood estimate for a given likelihood function — estimate_mle","text":"Adam Kucharski, Joshua W. Lambert","code":""},{"path":"/reference/estimate_mle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the maximum-likelihood estimate for a given likelihood function — estimate_mle","text":"","code":"# example for a one parameter model sim_data <- rnorm(100, 5, 2) log_likelihood <- function(x, a) dnorm(x, a, 2, log = TRUE) a_initial <- 4  estimate_mle(   log_likelihood = log_likelihood,   data_in = sim_data,   n_param = 1,   a_initial = 1 ) #> $estimate #> [1] 4.939905 #>  #> $log_likelihood #> [1] -215.8972 #>   # example for a two parameter model sim_data <- rnorm(100, 5, 2) log_likelihood <- function(x, a, b) dnorm(x, a, b, log = TRUE) a_initial <- 4 b_initial <- 1  estimate_mle(   log_likelihood = log_likelihood,   data_in = sim_data,   n_param = 2,   a_initial = 1,   b_initial = 1 ) #> $estimate #>        a        b  #> 5.377671 1.974567  #>  #> $log_likelihood #> [1] -209.9133 #>"},{"path":"/reference/function_checkers.html","id":null,"dir":"Reference","previous_headings":"","what":"Check functions passed to exported functions — function_checkers","title":"Check functions passed to exported functions — function_checkers","text":"Internal helper function check whether function passed argument meets requirements package methods. test_fn_req_args() checks whether function expected number required arguments, .e., arguments without default values. Defaults checking single required argument. test_fn_num_out() checks whether function accepting numeric vector input returns numeric vector output length input, finite non-missing values \\(\\geq\\) 0.0.","code":""},{"path":"/reference/function_checkers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check functions passed to exported functions — function_checkers","text":"","code":"test_func_req_args(func, n_req_args = 1)  test_func_num_out(func, n = 10)"},{"path":"/reference/function_checkers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check functions passed to exported functions — function_checkers","text":"func function. expected function evaluating density distribution numeric values. n_req_args number required arguments, .e., arguments without default values. n number elements evaluate function func. Defaults 10, func evaluated seq(n).","code":""},{"path":"/reference/function_checkers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check functions passed to exported functions — function_checkers","text":"logical whether function func fulfils conditions specified respective checks.","code":""},{"path":"/reference/ic_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to create a model comparison table — ic_tbl","title":"Helper function to create a model comparison table — ic_tbl","text":"helper function creating model comparison <data.frame> primarily use superspreading vignettes. designed specifically handling fitdistrplus::fitdist() output generalised function. See bbmle::ICtab() general use function create information criteria tables.","code":""},{"path":"/reference/ic_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to create a model comparison table — ic_tbl","text":"","code":"ic_tbl(..., sort_by = c(\"AIC\", \"BIC\", \"none\"))"},{"path":"/reference/ic_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to create a model comparison table — ic_tbl","text":"... dots One model fit results fitdistrplus::fitdist(). sort_by character string specifying information criterion order table , either \"AIC\" (default), \"BIC\", \"none\" (.e. ordering).","code":""},{"path":"/reference/ic_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to create a model comparison table — ic_tbl","text":"<data.frame>.","code":""},{"path":"/reference/ic_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function to create a model comparison table — ic_tbl","text":"","code":"if (requireNamespace(\"fitdistrplus\", quietly = TRUE)) {   cases <- rnbinom(n = 100, mu = 5, size = 0.7)   pois_fit <- fitdistrplus::fitdist(data = cases, distr = \"pois\")   geom_fit <- fitdistrplus::fitdist(data = cases, distr = \"geom\")   nbinom_fit <- fitdistrplus::fitdist(data = cases, distr = \"nbinom\")   ic_tbl(pois_fit, geom_fit, nbinom_fit) } #>   distribution      AIC   DeltaAIC         wAIC      BIC   DeltaBIC #> 1         geom 546.6447   0.000000 6.265959e-01 549.2499   0.000000 #> 2       nbinom 547.6800   1.035281 3.734041e-01 552.8903   3.640451 #> 3         pois 849.8365 303.191794 9.114358e-67 852.4417 303.191794 #>           wBIC #> 1 8.605932e-01 #> 2 1.394068e-01 #> 3 1.251804e-66"},{"path":"/reference/multi_fitdist.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to call a fitting function across different models — multi_fitdist","title":"Helper function to call a fitting function across different models — multi_fitdist","text":"utility function allows comparing different model fits single dataset. executing specified function data provided models specified. function organises output calculates AIC BIC ranks output model fit determined rank_by argument.","code":""},{"path":"/reference/multi_fitdist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to call a fitting function across different models — multi_fitdist","text":"","code":"multi_fitdist(data, models, func, rank_by = c(\"aic\", \"bic\", \"loglik\"))"},{"path":"/reference/multi_fitdist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to call a fitting function across different models — multi_fitdist","text":"data vector data frame containing data required function specified func argument. models character string vector character strings specifying names candidate models. naming models match required function specified func argument. vector models named name model argument specified func argument second. See details. func function (closure) used fit models. user-defined specified another package's namespace. rank_by character string, either \"loglik\", \"aic\" \"bic\" rank order output data frame. Default \"aic\".","code":""},{"path":"/reference/multi_fitdist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to call a fitting function across different models — multi_fitdist","text":"data frame containing models associated loglikelihood, aic, bic.","code":""},{"path":"/reference/multi_fitdist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Helper function to call a fitting function across different models — multi_fitdist","text":"vector models given models argument needs named name model argument supplied func second argument function. elements vector need named, see example. data assumed always first argument function supplied func, multi_fitdist() work correctly case.","code":""},{"path":"/reference/multi_fitdist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function to call a fitting function across different models — multi_fitdist","text":"","code":"if (FALSE) { multi_fitdist(   data = rgamma(n = 100, shape = 1, scale = 1),   models = c(\"gamma\", \"weibull\", \"lnorm\"),   func = fitdistrplus::fitdist )  # Where the model is not the second argument in the function specified, # the models have to be named according to what they are called in the # original function. argument of the function input. Here, `distr` is the # name required in `fitdistrplus::fitdist()` multi_fitdist(   data = rgamma(n = 100, shape = 1, scale = 1),   models = c(distr = \"gamma\", distr = \"weibull\", distr = \"lnorm\"),   func = fitdistrplus::fitdist ) }"}]
